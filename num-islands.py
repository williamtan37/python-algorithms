from collections import deque

'''
Time: O(M*N), Space: O(min(M,N))

Used breadth first search. Could also use depth first search. 
'''
def numIslands(grid) -> int:
  result = 0;
  for row in range(len(grid)):
    for col in range(len(grid[row])):
      if (grid[row][col] == "1"):
        result += 1
        frontier = deque()
        
        frontier.append((row,col))
        grid[row][col] = "0"
        while frontier:
          (r, c) = frontier.popleft();

          if r-1 >= 0 and grid[r-1][c] == '1':
            frontier.append((r-1,c))
            grid[r-1][c] = "0"
          if c-1 >= 0 and grid[r][c-1] == '1':
            frontier.append((r,c-1))
            grid[r][c-1] = "0"
          if c+1 < len(grid[row]) and grid[r][c+1] == '1' :
            frontier.append((r,c+1))
            grid[r][c+1] = "0"
          if r+1 < len(grid) and grid[r+1][c] == '1':
            frontier.append((r+1,c))
            grid[r+1][c] = "0"
  return result

grid1 = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]

grid2 = [
  ["1","1","0","1","1"],
  ["1","1","0","0","1"],
  ["1","0","1","0","0"],
  ["1","0","0","1","1"]
]

grid3 = [["1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","0","1","0","1","1"],["0","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0"],["1","0","1","1","1","0","0","1","1","0","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","0","1","1","1","1","1","1","0","1","1","1","0","1","1","1","0","1","1","1"],["0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","1","1"],["1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["0","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","0","1","1","1","1","1","1","1","0","1","1","1","1","1","1"],["1","0","1","1","1","1","1","0","1","1","1","0","1","1","1","1","0","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","0"],["1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","0"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"]]

print(numIslands(grid3))